package demo.main.services;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import demo.main.entities.Sell;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.*;
import java.util.List;

/**
 * Created by radu on 16.04.2017.
 */
public class PdfGenerator extends ReportGenerator {

    private static Font font = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);

    @Override
    public void generateReport(java.util.List<Sell> sells) throws IOException, DocumentException {

        String pdfFile = "reports/pdf/" + LocalDate.now().toString() + ".pdf";
        File file = new File(pdfFile);
        if (!file.getParentFile().exists())
            file.getParentFile().mkdirs();
        if (!file.exists())
            file.createNewFile();

        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(pdfFile));

        document.open();
        addMetaData(document);
        addContent(document,sells);
        document.close();
    }


    private void addMetaData(Document document) {
        document.addTitle("Report");
        document.addAuthor("Gigel");
    }


    private void addContent(Document document, List<Sell> sells) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Sells report or something", font));
        addEmptyLine(preface, 1);;
        preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") +
                ", " + new Date(), smallFont));
        addEmptyLine(preface, 1);
        document.add(preface);

        Anchor anchor = new Anchor("First Chapter", font);
        anchor.setName("First Chapter");
        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor),1);

        Paragraph subPara = new Paragraph("Top 10 best sellers",smallFont);
        Section subCatPart = catPart.addSection(subPara);
        // add a table
        addEmptyLine(subCatPart, 1);

        createTable(subCatPart, sells);
        document.add(subCatPart);
    }

    private static void createTable(Section section, List<Sell> sells){
        PdfPTable table = new PdfPTable(3);

        PdfPCell c1 = new PdfPCell(new Phrase("Sell Id"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Book Id"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Quantity"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        for(int i=0; i<sells.size(); i++){
            table.addCell(Integer.toString(sells.get(i).getId()));
            table.addCell(Integer.toString(sells.get(i).getBookId()));
            table.addCell(Integer.toString(sells.get(i).getQuantity()));
        }

        section.add(table);
    }


    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
    private static void addEmptyLine(Section section, int number) {
        for (int i = 0; i < number; i++) {
            section.add(new Paragraph(" "));
        }
    }

}
